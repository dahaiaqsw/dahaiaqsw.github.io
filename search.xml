<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[剪辑第一课]]></title>
    <url>%2F2020%2F10%2F13%2F%E5%89%AA%E8%BE%91%E7%AC%AC%E4%B8%80%E8%AF%BE%2F</url>
    <content type="text"><![CDATA[想剪个新三国的搞笑视频，翻了翻电脑，pr、au赫然在列，一年前就已经装了，因为刚装上，出于新鲜点了点，后面就…… 整整吃了一年的灰。 第一步先找素材，于是就去网上找新三国全集下载，这玩意录屏有点坑啊，太多集了。找了半天，没有……只好借助imba的bt了。以前的torrentkitty貌似上不去了，果断放弃了，找了n个网站，没有一个满意的，最后竟然在百度知道的一个回答中，良心的答主贴了个磁力链接。果断打开迅雷，资源可以用，但是速度…… 其实是很快的，1M/s，简直狂喜。谁知走了几分钟，速度下坡似的，逐渐趋于0，以至到达真正的0M/s，擦亮天真的眼睛，仔细看了看，原来刚才是迅雷送的温暖，5min的白金会员体验。然后让你憧憬高潮般的顶峰速度，叹着蜗牛爬行般的眼前速度。不过也不尽然，偶尔速度会飙至十几K。这下载完估计得到下一个五年计划了。 于是果断开通白金会员，是不可能的。浏览各大vip共享网站，号称每天更新的共享账号，挨个复制粘贴登录，结果，没有一个能用的。果然不花钱的东西没有好的。 只能求助于万能的某宝，果然，会员还可以租，突然想到这两天持续发酵的“上海名媛群”，共享经济已经深入到毛细血管了么？我也来a个vip账号吧，半天时限。 当登录上去的那一刻，看着速度逐渐爬升到1.5M/s左右，巅峰的快感又再一次回来了。 开着机子，安心的睡觉，明天95集的新三国就躺在我硬盘咯。 我特么…… 第二天早上睁开眼，第一件事就是赶紧看电脑。结果发出了上面愤怒又不至失礼的自言自语。速度又变成了0M/s，瞬间又回到了低估的失落。我寻思着，这半天时间还没到呢，怎么就又变零蛋了呢？ 后来我明白了，不要祈求流氓会彻底的浪子回头，流氓终究是流氓。有些秉性，即使“高岸为谷，深谷为陵”，也改变不了。迅雷把bt都搞歪了，结果劣币驱逐良币，现在不用迅雷还真不好下。用也不能让你白用，不花钱就只有零蛋。花了钱，爽一次就想完事？算了，70%就凑合了，总比一集都没有好。 一年前刚装pr的时候，试着剪过几个简单的，感觉也挺容易的。估计这次也挺容易的，没想到上来来个mkv格式（下载的新三国都是mkv格式的），pr2018不支持，拖不进去。于是简单了解了下mkv，大致相当于一个容器，你把视频、音频、字幕、字体等丢进来，它给你封装到一起，出来个成品，就是我们看到的视频。 于是就想着怎么给它解封，重新搞成视频、音频、字幕、字体等原材料。果断开始网上冲浪，浪了半天，最终定下来这么几个工具：mkvtoolnix、mkvextractorGUI、还有一个拖进批处理文件就能飞速生成mp4格式视频的脚本。用了一下，速度确实飞起，就是有个缺点，会丢了字幕。于是就用mkvextractorGUI整个工具，提取字幕文件。结果拖进视频就报错。大致意思是地址不对什么的。查了半天，最终似是而非的觉得是版本问题，这个工具依赖mkvtoolnix，但是让人诧异的是mkvtoolnix官方下载下来没有这个mkvextractorGUI工具，需要自己下载这个。人老了牙齿掉光了，吃饭要靠假牙，但是你吃饭就是不带假牙，让别人嚼碎了喂你，这不恶心么？ 我最初下的mkvtoolnix是v46版本的，别人分享的mkvextractorGUI这个是2.3版本的，不行，最后，找到一个2.5.2版本的，才终于和这个v46的对上了。 这下三条轨道都拖进pr了，开始改字幕样式，炫酷的ass格式字幕，pr不支持，大都用的文本字幕srt，没有了任何装饰，只能自己重新修改字幕样式。结果样式又给整半天…… 修改字幕样式，改了不起作用。没有办法只能再求助于万能的互联网。找了半天，找到一种方法。很诡异…… 用记事本改字幕源文件，随便改点什么，回到pr把改的再删掉，然后，再改字幕就起作用了……这是什么逻辑？我试着弄了一下，回到pr以后，我用记事本改的完全不显示，（在pr里还是以前的字幕）但是神奇的是，这会改的字幕起作用了。 让人犹入云山雾海之中，不知所处，不知所踪。就这样，稀里糊涂的改好了。 整个过程耗费了大半天的时间，不禁再回头想想自己没动手之前所设想的“容易”二字。这世界上，大部分的事情，想起来都是特别容易的。我躺在被窝里，脑子就能游遍全世界。可一旦动起手来，问题就都来了，大多数都是你躺在那所想不到的。因为我们还没经历，没有提供给大脑足够多用来联想的素材，因此，问题产生于人们的生产生活中，实践才会暴露出更多的问题。我们在解决问题的过程中，既是一种探索与学习的方法，同时又是一种丰富知识、提升自我的手段。]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>剪辑</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python装饰器]]></title>
    <url>%2F2019%2F11%2F08%2Fpython%E8%A3%85%E9%A5%B0%E5%99%A8%2F</url>
    <content type="text"><![CDATA[装饰器：顾名思义就是用来装饰某一个东西的。在python中，这里的东西有两个，一个是函数，另一个是类；而装饰器本身也既可以是函数，也可以是类。 用途： 在不改变其它函数或类源代码的前提下为该函数和类增加额外功能。 应用场景： 插入日志、性能测试、事务处理、缓存、权限校验等 。 一个简单的例子如下： 12345def fn(): j = 0 for i in range(10000): j += i print(j) 现在我们要计算程序耗时，就可以写一个装饰器如下： 12345678import timedef wraper(fn): def inner(*args, **kwargs): start = time.time() fn(*args, **kwargs) print(f'cost &#123;time.time() - start&#125;') return inner 使用语法糖@装饰我们的原函数fn： 123456@wraperdef fn(): j = 0 for i in range(10000): j += i print(j) 调用函数fn()，输出结果如下： 1249995000cost 0.000997304916381836]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第五篇测试]]></title>
    <url>%2F2019%2F10%2F30%2F%E7%AC%AC%E4%BA%94%E7%AF%87%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[下面是一段代码块 12def fn(): print('this is a function') 下面是另一段代码 1234567891011121314151617class Descriptor(object): def __get__(self, instance, owner_class): print(instance) print(owner_class) print('get') def __set__(self, instance, value): print(instance) if not isinstance(value, int): raise ValueError(f'&#123;value&#125; must be a integer') print('set') def __delete__(self, isinstance): print(isinstance) print('del')]]></content>
      <categories>
        <category>learning</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第四篇测试]]></title>
    <url>%2F2019%2F10%2F30%2F%E7%AC%AC%E5%9B%9B%E7%AF%87%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[下面是一张表格 第一列 第二列 第三列 第四列 第五列 东邪 西毒 南帝 北丐 中神通 黄药师 欧阳锋 段智兴 洪七公 王重阳 下面是一条线和一个链接]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[测试文章]]></title>
    <url>%2F2019%2F09%2F27%2Fchapter2%2F</url>
    <content type="text"><![CDATA[这是有序列表 东邪 西毒 南帝 北丐 中神通 这是无序列表 东邪 西狂 南僧 北侠 中顽童]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F09%2F27%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
